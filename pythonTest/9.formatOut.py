#!/usr/bin/env python
# -*- coding: utf-8 -*-

__mtime__ = '2020-01-06'

#字符串格式化：更好的去表达一个字符串，更加规范化的去表达一个字符串
# 接口自动化课程中 会用到 很多很多 request.post(data = infoData)里面传值的时候 会用到很多
# 格式化方法一：%占位符法
"""
%s:传进来的是字符串，如果不是会str()强制转换
%d:转成有符号的十进制
%f:转成浮点数 后面默认是6位（四舍五入） %.2f保留2位
%x:代码无符号十六进制数   %#x 加个# 可以加0X前缀，让人家知道是表示16进制
"""
name = "lili"
age = 18
# print("我叫%s,年龄是:%d" %(name,age))#两个 或者两个以上需要用元祖来表示
# print('%5d' %56) #%5d 元素的长度为5个 %正数值d 右对齐，左补齐 补空格
# print('%-5d' %56)#%-5d 元素的长度为5个 %负数值d 左对齐，右补齐 补空格
# print('%05d' %56) #%5d 元素的长度为5个 %正数值d 右对齐，左补齐 补0
# print('%1.3f' %3.1415926) #如果长度要求<传入值的长度，则不会执行

# 格式化方法二 字符串.format ----位置不能空着,值可以多，可以指定宽度
# 1、顺序填值 指定宽度{：方向宽度} >右对齐，<左对齐，^居中对齐
# info = '我叫：{}，年龄是：{}'.format(name,age)
# info1 = '我叫：{:>6}，年龄是：{:>6}'.format(name,age) #字符串默认是左对齐，int默认是右对齐
# info2 = '我叫：{:0>6}，年龄是：{:0>6}'.format(name,age) #不够的位数，补0，字符串默认是左对齐，int默认是右对齐
# print(info2)
# 2、下标填值，补齐，对齐都是通用的
# info = '我叫：{0}，年龄是：{1}'.format(name,age) #要么就全写，要么就全不写，不要用负下标
# print(info)

# 格式化方法三 python3.6之后 直接加个f即可
# info = f'我叫：{name},年龄是：{age}'
# print(info)

# 如果字符串本身就有一个{}，该怎么输出
info= f'我叫{name}，年龄是：{age}，我自己有一个{{}}字符'
print(info)



